import * as tslib_1 from "tslib";
import { DOCUMENT } from '@angular/common';
import { APP_ID, NgModule } from '@angular/core';
import { BEFORE_APP_SERIALIZED } from '@angular/platform-server';
import { hydrateDocument } from '@ionic/core/hydrate';
// @dynamic
import * as ɵngcc0 from '@angular/core';
var IonicServerModule = /** @class */ (function () {
    function IonicServerModule() {
    }
IonicServerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: IonicServerModule });
IonicServerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function IonicServerModule_Factory(t) { return new (t || IonicServerModule)(); }, providers: [
        {
            provide: BEFORE_APP_SERIALIZED,
            useFactory: hydrateIonicComponents,
            multi: true,
            deps: [DOCUMENT, APP_ID]
        }
    ] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IonicServerModule, [{
        type: NgModule,
        args: [{
                providers: [
                    {
                        provide: BEFORE_APP_SERIALIZED,
                        useFactory: hydrateIonicComponents,
                        multi: true,
                        deps: [DOCUMENT, APP_ID]
                    }
                ]
            }]
    }], function () { return []; }, null); })();
    return IonicServerModule;
}());
export { IonicServerModule };
// @dynamic
// tslint:disable-next-line: only-arrow-functions
export function hydrateIonicComponents(doc, appId) {
    return function () {
        return hydrateDocument(doc, {
            clientHydrateAnnotations: false,
            excludeComponents: [
                // overlays
                'ion-action-sheet',
                'ion-alert',
                'ion-loading',
                'ion-modal',
                'ion-picker',
                'ion-popover',
                'ion-toast',
                'ion-toast',
                // navigation
                'ion-router',
                'ion-route',
                'ion-route-redirect',
                'ion-router-link',
                'ion-router-outlet',
                // tabs
                'ion-tabs',
                'ion-tab',
                // auxiliar
                'ion-picker-column',
                'ion-virtual-scroll'
            ]
        })
            .then(function (hydrateResults) {
            hydrateResults.diagnostics.forEach(function (d) {
                if (d.type === 'error') {
                    console.error(d.messageText);
                }
                else if (d.type === 'debug') {
                    console.debug(d.messageText);
                }
                else {
                    console.log(d.messageText);
                }
            });
            if (doc.head != null) {
                var styleElms = doc.head.querySelectorAll('style[data-styles]');
                for (var i = 0; i < styleElms.length; i++) {
                    styleElms[i].setAttribute('ng-transition', appId);
                }
            }
            if (doc.body != null) {
                var ionPages = doc.body.querySelectorAll('.ion-page.ion-page-invisible');
                for (var i = 0; i < ionPages.length; i++) {
                    ionPages[i].classList.remove('ion-page-invisible');
                }
            }
        });
    };
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW9uaWMtc2VydmVyLW1vZHVsZS5qcyIsInNvdXJjZXMiOlsibmc6L0Bpb25pYy9hbmd1bGFyLXNlcnZlci9pb25pYy1zZXJ2ZXItbW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDakUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXRELFdBQVc7O0FBV1g7QUFHTSxJQUhOO0FBQStCLElBQUMsQ0FBQztJQUFwQixpQkFBaUIsZ0NBVjdCLFFBQVEsQ0FBQyxjQUNSO01BQVMsRUFBRSxrQkFDVCxzQkFDRSxPQUFPLEVBQUUscUJBQXFCLHNCQUM5QixVQUFVLEVBQUUsc0JBQXNCO0NBQ2xDLEtBQUssRUFBRTtFQUFJLHNCQUNYLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRTtHQUFNLENBQUMsa0JBQ3pCLGNBQ0YsVUFDRixDQUFDO09BQ1csaUJBQWlCO0FBQUc7Ozs7Ozs7Ozs7Ozs7OztnREFDakM7QUFDQSxJQUZnQyx3QkFBQztBQUVqQyxDQUZpQyxBQUFqQyxJQUFpQztBQUNqQyxTQURhLGlCQUFpQjtBQUU5QixXQUFXO0FBQ1gsaURBQWlEO0FBQ2pELE1BQU0sVUFBVSxzQkFBc0IsQ0FBQyxHQUFRLEVBQUUsS0FBVTtBQUMzRCxJQUFFLE9BQU87QUFDSCxRQUFGLE9BQU8sZUFBZSxDQUFDLEdBQUcsRUFBRTtBQUNoQyxZQUFNLHdCQUF3QixFQUFFLEtBQUs7QUFDckMsWUFBTSxpQkFBaUIsRUFBRTtBQUN6QixnQkFBUSxXQUFXO0FBQ25CLGdCQUFRLGtCQUFrQjtBQUMxQixnQkFBUSxXQUFXO0FBQ25CLGdCQUFRLGFBQWE7QUFDckIsZ0JBQVEsV0FBVztBQUNuQixnQkFBUSxZQUFZO0FBQ3BCLGdCQUFRLGFBQWE7QUFDckIsZ0JBQVEsV0FBVztBQUNuQixnQkFBUSxXQUFXO0FBQ25CLGdCQUNRLGFBQWE7QUFDckIsZ0JBQVEsWUFBWTtBQUNwQixnQkFBUSxXQUFXO0FBQ25CLGdCQUFRLG9CQUFvQjtBQUM1QixnQkFBUSxpQkFBaUI7QUFDekIsZ0JBQVEsbUJBQW1CO0FBQzNCLGdCQUNRLE9BQU87QUFDZixnQkFBUSxVQUFVO0FBQ2xCLGdCQUFRLFNBQVM7QUFDakIsZ0JBQ1EsV0FBVztBQUNuQixnQkFBUSxtQkFBbUI7QUFDM0IsZ0JBQVEsb0JBQW9CO0FBQzVCLGFBQU87QUFDUCxTQUFLLENBQUM7QUFDTixhQUFLLElBQUksQ0FBQyxVQUFBLGNBQWM7QUFBSSxZQUN0QixjQUFjLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7QUFBSSxnQkFDdEMsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFBRTtBQUNoQyxvQkFBVSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN2QyxpQkFBUztBQUFDLHFCQUFLLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxPQUFPLEVBQUU7QUFDdkMsb0JBQVUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDdkMsaUJBQVM7QUFBQyxxQkFBSztBQUNmLG9CQUFVLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3JDLGlCQUFTO0FBQ1QsWUFBTSxDQUFDLENBQUMsQ0FBQztBQUNULFlBQ00sSUFBSSxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksRUFBRTtBQUM1QixnQkFBUSxJQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLG9CQUFvQixDQUFpQyxDQUFDO0FBQzFHLGdCQUFRLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ25ELG9CQUFVLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzVELGlCQUFTO0FBQ1QsYUFBTztBQUNQLFlBQ00sSUFBSSxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksRUFBRTtBQUM1QixnQkFBUSxJQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLDhCQUE4QixDQUE0QixDQUFDO0FBQzlHLGdCQUFRLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ2xELG9CQUFVLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDN0QsaUJBQVM7QUFDVCxhQUFPO0FBQ1AsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQVBQX0lELCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQkVGT1JFX0FQUF9TRVJJQUxJWkVEIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tc2VydmVyJztcbmltcG9ydCB7IGh5ZHJhdGVEb2N1bWVudCB9IGZyb20gJ0Bpb25pYy9jb3JlL2h5ZHJhdGUnO1xuXG4vLyBAZHluYW1pY1xuQE5nTW9kdWxlKHtcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogQkVGT1JFX0FQUF9TRVJJQUxJWkVELFxuICAgICAgdXNlRmFjdG9yeTogaHlkcmF0ZUlvbmljQ29tcG9uZW50cyxcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgZGVwczogW0RPQ1VNRU5ULCBBUFBfSURdXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIElvbmljU2VydmVyTW9kdWxlIHt9XG5cbi8vIEBkeW5hbWljXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG9ubHktYXJyb3ctZnVuY3Rpb25zXG5leHBvcnQgZnVuY3Rpb24gaHlkcmF0ZUlvbmljQ29tcG9uZW50cyhkb2M6IGFueSwgYXBwSWQ6IGFueSkge1xuICByZXR1cm4gKCkgPT4ge1xuICAgIHJldHVybiBoeWRyYXRlRG9jdW1lbnQoZG9jLCB7XG4gICAgICBjbGllbnRIeWRyYXRlQW5ub3RhdGlvbnM6IGZhbHNlLFxuICAgICAgZXhjbHVkZUNvbXBvbmVudHM6IFtcbiAgICAgICAgLy8gb3ZlcmxheXNcbiAgICAgICAgJ2lvbi1hY3Rpb24tc2hlZXQnLFxuICAgICAgICAnaW9uLWFsZXJ0JyxcbiAgICAgICAgJ2lvbi1sb2FkaW5nJyxcbiAgICAgICAgJ2lvbi1tb2RhbCcsXG4gICAgICAgICdpb24tcGlja2VyJyxcbiAgICAgICAgJ2lvbi1wb3BvdmVyJyxcbiAgICAgICAgJ2lvbi10b2FzdCcsXG4gICAgICAgICdpb24tdG9hc3QnLFxuXG4gICAgICAgIC8vIG5hdmlnYXRpb25cbiAgICAgICAgJ2lvbi1yb3V0ZXInLFxuICAgICAgICAnaW9uLXJvdXRlJyxcbiAgICAgICAgJ2lvbi1yb3V0ZS1yZWRpcmVjdCcsXG4gICAgICAgICdpb24tcm91dGVyLWxpbmsnLFxuICAgICAgICAnaW9uLXJvdXRlci1vdXRsZXQnLFxuXG4gICAgICAgIC8vIHRhYnNcbiAgICAgICAgJ2lvbi10YWJzJyxcbiAgICAgICAgJ2lvbi10YWInLFxuXG4gICAgICAgIC8vIGF1eGlsaWFyXG4gICAgICAgICdpb24tcGlja2VyLWNvbHVtbicsXG4gICAgICAgICdpb24tdmlydHVhbC1zY3JvbGwnXG4gICAgICBdXG4gICAgfSlcbiAgICAudGhlbihoeWRyYXRlUmVzdWx0cyA9PiB7XG4gICAgICBoeWRyYXRlUmVzdWx0cy5kaWFnbm9zdGljcy5mb3JFYWNoKGQgPT4ge1xuICAgICAgICBpZiAoZC50eXBlID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihkLm1lc3NhZ2VUZXh0KTtcbiAgICAgICAgfSBlbHNlIGlmIChkLnR5cGUgPT09ICdkZWJ1ZycpIHtcbiAgICAgICAgICBjb25zb2xlLmRlYnVnKGQubWVzc2FnZVRleHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGQubWVzc2FnZVRleHQpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKGRvYy5oZWFkICE9IG51bGwpIHtcbiAgICAgICAgY29uc3Qgc3R5bGVFbG1zID0gZG9jLmhlYWQucXVlcnlTZWxlY3RvckFsbCgnc3R5bGVbZGF0YS1zdHlsZXNdJykgYXMgTm9kZUxpc3RPZjxIVE1MU3R5bGVFbGVtZW50PjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHlsZUVsbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBzdHlsZUVsbXNbaV0uc2V0QXR0cmlidXRlKCduZy10cmFuc2l0aW9uJywgYXBwSWQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChkb2MuYm9keSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGlvblBhZ2VzID0gZG9jLmJvZHkucXVlcnlTZWxlY3RvckFsbCgnLmlvbi1wYWdlLmlvbi1wYWdlLWludmlzaWJsZScpIGFzIE5vZGVMaXN0T2Y8SFRNTEVsZW1lbnQ+O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlvblBhZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaW9uUGFnZXNbaV0uY2xhc3NMaXN0LnJlbW92ZSgnaW9uLXBhZ2UtaW52aXNpYmxlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn1cbiJdfQ==